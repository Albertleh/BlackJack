import pandas as pd
import os
import sys
import matplotlib.pyplot as plt
import time
import random

from pandas.core.arrays.boolean import BooleanArray

from pandas.core.base import DataError

""" TO DO LISt:
    
    - create BOT with a variable accuracy 0-100%
    - finish play hand function
    - create a paying system (maybe with external files) where wins and losses are documented   
        furthermore small little dashboard would be nice (maybe graph of bankroll)
    - implement card counting algorithm 
    - for large scale simulations of the card counting algorithm maybe implement threading
    - later on autogenerated datasets of the simulations would be nice BOT as well as card counting algorithm
    - find optimal card counting algorithm maybe later on machine learning
    - visualize data and insigths with seaborn library
    - create docker container for project
    - publish working project on github
"""
# User settings provided by command prompt
class Settings:
    def __init__(self) -> None:
        if len(sys.argv) > 1:
            self.decks_in_shoe = int(sys.argv[1])
            # playermodes: manual, auto, autocount
            self.playermode = sys.argv[2]
            # number of hands to play
            self.play_hands = int(sys.argv[3])
            # amount per round to bet
            self.betsize = int(sys.argv[4])
            # initial chipstack value
            self.balance = int(sys.argv[5])
        else:
            # if no arguments provided starting in default mode
            sys.stdout.write('No arguments provided. Using default settings?\n')
            time.sleep(1)
            self.decks_in_shoe = 5
            self.playermode = 'manual'
            self.play_hands = 10
            self.betsize = 5
            self.balance = 1000
        
        self.shoe = []
        self.running_count_history = []
        self.betsize_history = []
        self.running_count = 0
        self.true_count = 0
        self.handnr = 1
        self.deck_global = pd.DataFrame(['2s','2d','2c','2h','3s','3d','3c','3h','4s','4d','4c','4h','5s','5d','5c','5h','6s','6d','6h','6c','7s','7d','7c','7h','8s','8d','8c','8h','9s','9d','9c','9h','10s','10d','10c','10h','Js','Jd','Jc','Jh','Qs','Qd','Qc','Qh','Ks','Kd','Kc','Kh','As','Ad','Ac','Ah'])
        """ created an additional file for me just to get the line above with the single quotes and commas automatically inserted
            for me to copy and paste cause I'm lazy and don't like manual work
            
            cards = pd.read_csv('deck.txt', header=None)
            fil = open('copy.txt', 'w+')
            fil.close()
            with open('copy.txt', 'a') as fil:
                for e in range(0, len(cards)-1):
                    fil.write(f"'{cards[0][e]}',")
        """
settings = Settings() 

def shuffle_shoe(): 
    settings.shoe = settings.deck_global.sample(frac = settings.decks_in_shoe, replace = True)
    #print(f"this is the first element {settings.shoe.iloc[0,0]}")
    #settings.shoe.set_index('0', inplace=True)
    print(f"Shoe full of {settings.decks_in_shoe} decks has been shuffled")
    # reset running count 
    settings.running_count = 0

def get_cardvalue(card) -> int:
    if card != None:
        if 'A' in card:
            return 11
        elif 'K' in card:
            return 10
        elif 'Q' in card:
            return 10
        elif 'J' in card:
            return 10
        else:
            return int(card[:-1])
    else:
        print('IS NONE')
        print(settings.shoe)


def draw_card() -> str:
    # Shuffle cards when shoe is empty
    if len(settings.shoe) == 1 :
        print("Shoe is empty: Shuffling Cards...")
        shuffle_shoe()
    
    first_card = settings.shoe.iloc[-1][0]
    settings.shoe = settings.shoe.iloc[:-1]
    # implement carrd counting
    if settings.playermode != '':
        if get_cardvalue(first_card) >= 10:
            settings.running_count -= 1
        elif get_cardvalue(first_card) <= 6:
            settings.running_count += 1
        else:
            pass
        # True count = running count/Decks Remaining
        settings.true_count = settings.running_count/settings.decks_in_shoe
        settings.running_count_history.append(settings.true_count)

    if first_card == None:
        print('draw card is none')
    return str(first_card)

def strategy_bot(player_handvalue: int, dealer_handvalue: int, splittable: bool , soft: bool, doubleaces: bool) -> str:
    if doubleaces:
        return 'split'
    elif splittable:
        print("splittable")
        if player_handvalue == 18 and dealer_handvalue < 10 and dealer_handvalue > 1:
            return 'split'
        elif player_handvalue == 16:
            return 'split'
        elif player_handvalue == 20:
            return 's'
        elif player_handvalue == 14 and dealer_handvalue < 8 and dealer_handvalue > 1:
            return 'split'
        elif player_handvalue == 10 and dealer_handvalue < 10 and dealer_handvalue > 1:
            return 'double'
        elif player_handvalue == 8 and dealer_handvalue < 7 and dealer_handvalue > 4:
            return 'split'
        elif player_handvalue == 6 and dealer_handvalue < 8 and dealer_handvalue > 1:
            return 'split'
        elif player_handvalue == 4 and dealer_handvalue < 8 and dealer_handvalue > 1:
            return 'split'
        else:
            return 'h'
    elif soft:
        print("is soft")
        if player_handvalue == 20:
            return 's'
        elif player_handvalue == 19:
            if dealer_handvalue == 6:
                return 'double'
            else:
                return "s"
        elif player_handvalue == 18:
            if dealer_handvalue < 7 and dealer_handvalue > 1:
                return 'double'
            elif dealer_handvalue < 12 and dealer_handvalue > 8:
                return 'h'
            else:
                return "s"
        elif player_handvalue == 17 and dealer_handvalue < 7 and dealer_handvalue > 2:
            return 'double'
        elif player_handvalue == 16 and dealer_handvalue < 7 and dealer_handvalue > 3:
            return 'double'
        elif player_handvalue == 15 and dealer_handvalue < 7 and dealer_handvalue > 3:
            return 'double'
        elif player_handvalue == 14 and dealer_handvalue < 7 and dealer_handvalue > 4:
            return 'double'
        elif player_handvalue == 13 and dealer_handvalue < 7 and dealer_handvalue > 4:
            return 'double'
        else:
            return "h"
    else:
        if player_handvalue < 17 and player_handvalue > 12 and dealer_handvalue < 7 and dealer_handvalue > 1:
            return "s"
        elif player_handvalue > 16 and player_handvalue < 22:
            return 's'
        elif player_handvalue == 12 and dealer_handvalue < 7 and dealer_handvalue > 3:
            return 's'
        elif player_handvalue == 11:
            if dealer_handvalue == 11:
                return 'h'
            else:
                return 'double'
        elif player_handvalue == 10 and dealer_handvalue < 10 and dealer_handvalue > 1:
            return 'double'
        elif player_handvalue == 9 and dealer_handvalue < 7 and dealer_handvalue > 2:
            return 'double'
        else:
            return 'h'
    
def play_hand(splitmode = False, player_starting_hand = '', dealer_starting_hand = '', betsize = 0):
    player_hand = []
    player_handvalue = 0
    dealer_hand = []
    dealer_handvalue = 0
    hand_balance = 0
    doubleaces = False

    if splitmode == False:
        # player draws first card
        player_hand.append(draw_card())
        player_handvalue = player_handvalue + get_cardvalue(player_hand[0])
        if settings.playermode == 'manual':
            print(f"player shows {player_hand} = {player_handvalue}")
        # dealer draws first card
        dealer_hand.append(draw_card())
        dealer_handvalue = dealer_handvalue + get_cardvalue(dealer_hand[0])
        if settings.playermode == 'manual':
            print(f"dealer shows {dealer_hand} = {dealer_handvalue}")
    else:
        print('entered split instance')
        # This is the card splitted by the user
        player_hand.append(player_starting_hand)
        player_handvalue = player_handvalue + get_cardvalue(player_hand[0])
        if settings.playermode == 'manual':
            print(f"player shows {player_hand} = {player_handvalue}")
        # This is the card which all splitted cards play against
        dealer_hand.append(dealer_starting_hand)
        dealer_handvalue = dealer_handvalue + get_cardvalue(dealer_hand[0])
        if settings.playermode == 'manual':
            print(f"dealer shows {dealer_hand} = {dealer_handvalue}")

    # player draws second card
    player_hand.append(draw_card())
    player_handvalue = player_handvalue + get_cardvalue(player_hand[1])
    # Two Aces makes 12 for the player
    if player_handvalue == 22:
        doubleaces = True
        player_handvalue = 12
    if settings.playermode == 'manual':
        print(f"player shows {player_hand} = {player_handvalue}")

    # Check if Player has a BlackJack
    if player_handvalue == 21:
        print("Player has got a BlackJack!")
        hand_balance += betsize*1.5
    else:
        splittable = False
        soft = False
        # If two cards are equal ignoring suits you can split them
        if player_hand[0][0] == player_hand[1][0]:
            splittable = True
        # If the first card is an Ace the handvalue is soft
        elif player_hand[0][0] == "A":
            soft = True

        action = ''   
        correct_action = ''
        bust = False
        # Player can draw cards until he busts
        while bust == False:
            if player_handvalue > 21:
                bust = True
            else:
                its_an_ace = False
                # If an Ace comes decide whether to count it as 1 or 11
                if len(player_hand) == 0:
                    break
                elif get_cardvalue(player_hand[len(player_hand)-1]) == 11 and player_handvalue > 21:
                    player_handvalue -= 10
                elif get_cardvalue(player_hand[len(player_hand)-1]) == 11 and player_handvalue < 21:
                    # Decide whether the bot makes decisions or the player 
                    if settings.playermode == "manual":
                        if splittable:
                            action = input(f"{player_hand} = {player_handvalue} or {player_handvalue-10} on a dealer {dealer_handvalue}  Hit or Stand (h/s/double/split)?")
                        else:
                            action = input(f"{player_hand} = {player_handvalue} or {player_handvalue-10} on a dealer {dealer_handvalue}  Hit or Stand (h/s/double)?")

                        correct_action = strategy_bot(player_handvalue, dealer_handvalue, splittable, soft, doubleaces)
                        if correct_action == action:
                            print('CORRECT!')
                        else:
                            print(f'FALSE! You should always {correct_action} !')

                    else:
                        action = strategy_bot(player_handvalue, dealer_handvalue, splittable, soft, doubleaces)
                    its_an_ace = True

                else:
                    if settings.playermode == "manual":
                        if splittable:
                            action = input(f"{player_hand} = {player_handvalue} on a dealer {dealer_handvalue}  Hit or Stand (h/s/double/split)?")
                        else:
                            action = input(f"{player_hand} = {player_handvalue} on a dealer {dealer_handvalue}  Hit or Stand (h/s/double)?")
                    else:
                        action = strategy_bot(player_handvalue, dealer_handvalue, splittable, soft, doubleaces)
                    
                    correct_action = strategy_bot(player_handvalue, dealer_handvalue, splittable, soft, doubleaces)
                    if correct_action == action:
                        print('CORRECT!')
                    elif action == 'd' and correct_action == 'double':
                        print('CORRECT!')
                    else:
                        print(f'FALSE! You should always {correct_action} !')
                # Player actions
                if action == 'h' or action == 'H':
                    if its_an_ace:
                        player_handvalue -= 10
                    # Player hits
                    player_hand.append(draw_card())
                    player_handvalue = player_handvalue + get_cardvalue(player_hand[len(player_hand)-1])
                    if settings.playermode == 'manual':
                        print(f"player shows {player_hand} = {player_handvalue}")

                elif action == 's' or action == 'S':
                    # Player stands
                    break
                elif action == 'double' or action == 'd':
                    # Player doubles
                    betsize *= 2
                    if its_an_ace:
                        player_handvalue -= 10
                    # Player hits
                    player_hand.append(draw_card())
                    player_handvalue = player_handvalue + get_cardvalue(player_hand[len(player_hand)-1])
                    if settings.playermode == 'manual':
                        print(f"player shows {player_hand} = {player_handvalue}")
                    break
                # Hands are endlessly splittable with recursion
                elif action == 'split' or action == 'Split':
                    splitted = True
                    hand_balance = play_hand(True, player_hand[-1], dealer_hand[0], betsize)
                    settings.handnr += 1
                    player_handvalue -= get_cardvalue(player_hand[-1])
                    player_hand.remove(player_hand[-1])
                    if settings.playermode == 'manual':
                        print(f"{player_hand} = {player_handvalue}  this is the players hand")
                    splittable = False

                else:
                    print("Invalid Input!")
                    continue
        
        #dealer draws cards up to soft 17
        while dealer_handvalue < 17 and bust == False:
            if settings.playermode == 'manual':
                time.sleep(1)
            dealer_hand.append(draw_card())
            dealer_handvalue = dealer_handvalue + get_cardvalue(dealer_hand[-1])
            # If an Ace comes decide whether to count it as 1 or 11
            if get_cardvalue(dealer_hand[len(dealer_hand)-1]) == 11 and dealer_handvalue > 21:
                dealer_handvalue -= 10
            if settings.playermode == 'manual':
                print(f"dealer turns {dealer_hand[-1]} = {dealer_handvalue}")

        if settings.playermode == 'manual':
            time.sleep(1)

        # Checks who won
        if player_handvalue > dealer_handvalue and bust == False:
            print("player won!")
            hand_balance += betsize
        elif player_handvalue == dealer_handvalue and bust == False:
            print("push!")
            hand_balance = 0
        elif bust == True:
            print("player busted!")
            hand_balance -= betsize
        elif bust == False and dealer_handvalue > 21:
            print("dealer busted!")
            hand_balance += betsize
        else:
            print("dealer won!")
            hand_balance -= betsize
    settings.handnr = 1
    return hand_balance

def main():
    broke = False
    bankroll_history_history = []
    # Can set value to an integer or: "til broke"
    shuffle_shoe()
    
    if settings.play_hands != 'til broke' and not broke:
        for e in range(1,settings.play_hands):
            if settings.balance >= settings.betsize:
                print('_________________________')
                print(f"Current balance: {settings.balance}$ \nTrueCount:       {settings.true_count} \n ")

                if settings.playermode == 'autocount':
                    if settings.true_count <= 1:
                        betsize = settings.betsize
                    else:
                        betsize = settings.betsize * settings.true_count * 2
                    settings.balance += play_hand(False,'','',betsize)
                    settings.betsize_history.append(betsize)
                else:    
                    settings.balance += play_hand(False,'','',settings.betsize)
                bankroll_history_history.append(settings.balance)
                settings.betsize_history.append(settings.betsize)
            else:
                break
    else:
        while not broke:

            if settings.balance >= settings.betsize:
                print(f"Current balance: {settings.balance}$")
                bankroll_history_history.append(settings.balance)
                settings.balance += play_hand(False,'','',settings.betsize)
            else:
                broke = True
        print("You are broke!")
    print("\nGenerating Player Stats..")

    fig, axs = plt.subplots(3)
    fig.suptitle('History')
    axs[0].plot(pd.DataFrame(bankroll_history_history))
    axs[0].set_ylabel('Bankroll')
    axs[0].set_xlabel('Hands Played')

    axs[1].plot(pd.DataFrame(settings.running_count_history))
    axs[1].set_ylabel('True Running Count')
    axs[1].set_xlabel('Cards Disclosed')

    axs[2].plot(pd.DataFrame(settings.betsize_history))
    axs[2].set_ylabel('Betsize')
    axs[2].set_xlabel('Hands Played')
    plt.show()
    
if __name__ == '__main__':
    main()
 
